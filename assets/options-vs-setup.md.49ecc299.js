import{_ as s,c as a,o,N as n}from"./chunks/framework.23a4abfb.js";const e="/proven-pinia-patterns/assets/options-vs-setup.920dee94.jpg",A=JSON.parse('{"title":"Options vs Setup Stores","description":"","frontmatter":{},"headers":[],"relativePath":"options-vs-setup.md"}'),p={name:"options-vs-setup.md"},l=n(`<h1 id="options-vs-setup-stores" tabindex="-1">Options vs Setup Stores <a class="header-anchor" href="#options-vs-setup-stores" aria-label="Permalink to &quot;Options vs Setup Stores&quot;">​</a></h1><blockquote><p>Con Pinia, hay dos formas diferentes de definir un <em>store</em>. Estos dos tipos de <em>store</em> se conocen como <a href="https://pinia.vuejs.org/core-concepts/#option-stores" target="_blank" rel="noreferrer">Options Store</a> y <a href="https://pinia.vuejs.org/core-concepts/#setup-stores" target="_blank" rel="noreferrer">Setup Store</a>. Puedes elegir qué tipo de <em>store</em> quieres usar. Ambos hacen básicamente lo mismo; la elección que haga dependerá de su propia preferencia personal o de su experiencia anterior con el uso de las diferentes API de Vue.</p></blockquote><p>Primero, repasemos cómo definimos un <em>store</em> con Pinia.</p><h2 id="definicion-de-un-store-pinia" tabindex="-1">Definición de un <em>Store</em> Pinia <a class="header-anchor" href="#definicion-de-un-store-pinia" aria-label="Permalink to &quot;Definición de un _Store_ Pinia&quot;">​</a></h2><p>Cada vez que queramos crear un <em>store</em>, ya sea un <em>options store</em> o un <em>setup store</em>, debemos importar <code>defineStore</code> desde Pinia. Luego pasamos un <em>string</em> para el nombre del <em>store</em> como primer parámetro.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">defineStore</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">pinia</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> useAuthStore </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineStore</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">auth</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;"> )</span></span></code></pre></div><blockquote><p>Este <em>string</em> es como una identificación: debe ser único porque así es como Pinia rastrea el estado de cada <em>store</em> individual. Es el nombre del <em>store</em> que verá en <strong>devtools</strong> para ese <em>store</em> en particular.</p></blockquote><p>Cuando creamos una identificación (o nombre) de <em>store</em>, eso crea una propiedad en el objeto de estado de la instancia de Pinia, y ahí es donde <strong>devtools</strong> busca los nombres de los <em>stores</em> para mostrarnos.</p><h2 id="options-stores" tabindex="-1">Options Stores <a class="header-anchor" href="#options-stores" aria-label="Permalink to &quot;Options Stores&quot;">​</a></h2><p>Si ha visto algunos otros cursos sobre Pinia, ya habrá aprendido a crear una Options Stores.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//Options Store</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">defineStore</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">pinia</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> useTodoStore </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineStore</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ToDoStore</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">state</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">todos</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> []</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">actions</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">addTodo</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">todo</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">todos</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">todo</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">getters</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">doneTodos</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">state</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">todos</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">filter</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">todo</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> todo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">done) </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><p>Lo que hace que esto sea un Options Stores es el segundo parámetro que pasamos a la función <code>defineStore</code>: es un objeto de opciones.</p><p>Esta sintaxis se sentirá similar a la Options API de Vue si la ha usado antes, especialmente los datos, métodos y propiedades calculadas de la Options API.</p><blockquote><p>En un tienda de opciones, el estado corresponde a los datos, las acciones a los métodos y los captadores a los computados.</p></blockquote><h2 id="setup-stores" tabindex="-1">Setup Stores <a class="header-anchor" href="#setup-stores" aria-label="Permalink to &quot;Setup Stores&quot;">​</a></h2><blockquote><p>Entonces, las Options Stores se sienten similares a la forma de hacer las cosas de la Options API... pero ¿eso significa que las Setup Stores se sienten similares a la forma de hacer las cosas de Vue 3 Composition?</p></blockquote><p>¡Sí! Si ha estado usando la Composition API de Vue 3, una Setup Stores le resultará mucho más familiar.</p><p>En una Setup Stores, el segundo parámetro que pasamos a <code>defineStore</code> es una función:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// Setup Store</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">defineStore</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">pinia</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ref</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">computed</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> useTodoStore </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineStore</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ToDoStore</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">todos</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">ref</span><span style="color:#F07178;">([])</span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">addTodo</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">todo</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">todos</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">todo</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">doneTodos</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">computed</span><span style="color:#F07178;">(</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">todos</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">filter</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;font-style:italic;">todo</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">todo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">done</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  )</span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">todos</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">addTodo</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">doneTodos</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><p>Al igual que la función <strong>setup</strong> en la Composition API, podemos crear un estado reactivo usando <code>refs</code> o <code>reactivo</code>. Nuestras acciones que pueden cambiar de estado se escribirán como funciones. Y podemos crear <code>getters</code> usando el ayudante <code>computed</code> de Vue.</p><blockquote><p>Cualquier propiedad de estado, función o propiedad calculada debe devolverse en un objeto.</p></blockquote><p>Esto es similar a la forma en que funciona la función <strong>setup</strong> en la Composition API, si está utilizando la sintaxis tradicional.</p><p>Muchas personas optan por utilizar una sintaxis abreviada denominada <strong>Script Setup API</strong> en sus archivos de componentes de Vue 3, y verá que se utiliza en el proyecto de ejemplo de este tutorial (el proyecto Pinia Restaurants).</p><p>Sin embargo, las <strong>stores</strong> de Pinia son archivos de JavaScript similares a los composables de Vue 3 y no pueden usar la sintaxis simplificada de <strong>script setup</strong>. Solo los archivos Vue pueden.</p><blockquote><p>Tenemos que usar la sintaxis <strong>setup</strong> tradicional, por lo que devolvemos propiedades y acciones de estado en el objeto devuelto si queremos que estén disponibles para otros archivos de Vue y las <strong>devtools</strong>.</p></blockquote><h2 id="¿cual-usar-options-o-setup-store" tabindex="-1">¿Cuál usar: Options o Setup store? <a class="header-anchor" href="#¿cual-usar-options-o-setup-store" aria-label="Permalink to &quot;¿Cuál usar: Options o Setup store?&quot;">​</a></h2><blockquote><p>En última instancia, la elección de utilizar una Options Store o una Setup Store depende de las preferencias y demandas de usted o de su equipo. Sin embargo, hay varias ventajas de usar una Setup Store.</p></blockquote><p>Las Setup Store nos permiten aprovechar la API de reactividad de Vue 3. Podemos usar composables, como funciones de composición de terceros de la biblioteca <a href="https://vueuse.org/" target="_blank" rel="noreferrer">VueUse</a>, y podemos usar <a href="https://vuejs.org/guide/essentials/watchers.html" target="_blank" rel="noreferrer">watchers</a>.</p><p>Veamos una característica de nuestra aplicación de ejemplo, Restaurantes Pinia, donde podemos usar un <code>watcher</code>.</p><p>Cuando el usuario carga la página, hay una entrada para escribir su ciudad.</p><p>Pero si el usuario no escribe nada, su ubicación actual se encontrará automáticamente. Para que puedan usar la ubicación que se carga para ellos, o pueden ingresar una nueva ubicación.</p><p><img src="`+e+'" alt="options-vs-setup"></p><p>The feature that loads their location automatically relies on the useGeolocation composable from VueUse.</p>',33),t=[l];function r(c,i,y,D,d,F){return o(),a("div",null,t)}const C=s(p,[["render",r]]);export{A as __pageData,C as default};
